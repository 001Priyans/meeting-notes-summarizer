import { Resend } from 'resend';

interface SendEmailParams {
  to: string[];
  subject: string;
  body: string;
}

interface SendEmailResponse {
  success: boolean;
  failedRecipients?: string[];
  error?: string;
}

const resend = process.env.RESEND_API_KEY ? new Resend(process.env.RESEND_API_KEY) : null;

function validateEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email.trim());
}

function parseEmails(emailString: string): string[] {
  return emailString
    .split(',')
    .map(email => email.trim())
    .filter(email => email.length > 0);
}

export async function sendEmail({ to, subject, body }: SendEmailParams): Promise<SendEmailResponse> {
  try {
    // Validate and clean email addresses
    const validEmails = parseEmails(to.join(','))
      .filter(email => validateEmail(email))
      .slice(0, 20); // Limit to 20 recipients

    if (validEmails.length === 0) {
      return {
        success: false,
        error: 'No valid email addresses provided'
      };
    }

    const invalidEmails = parseEmails(to.join(','))
      .filter(email => !validateEmail(email));

    const fromEmail = process.env.EMAIL_FROM || 'Meeting Summarizer <noreply@example.com>';

    if (resend) {
      // Use Resend
      const results = await Promise.allSettled(
        validEmails.map(async (email) => {
          return resend.emails.send({
            from: fromEmail,
            to: [email],
            subject: subject || 'Meeting Summary',
            html: `
              <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <h2 style="color: #333; border-bottom: 2px solid #eee; padding-bottom: 10px;">
                  ${subject || 'Meeting Summary'}
                </h2>
                <div style="white-space: pre-wrap; line-height: 1.6; color: #555;">
                  ${body.replace(/\n/g, '<br>')}
                </div>
                <hr style="margin: 20px 0; border: none; border-top: 1px solid #eee;">
                <p style="color: #888; font-size: 12px;">
                  This email was generated by an AI meeting summarizer.
                </p>
              </div>
            `,
            text: body
          });
        })
      );

      const failedRecipients: string[] = [];
      results.forEach((result, index) => {
        if (result.status === 'rejected') {
          failedRecipients.push(validEmails[index]);
        }
      });

      return {
        success: failedRecipients.length === 0,
        failedRecipients: failedRecipients.length > 0 ? [...failedRecipients, ...invalidEmails] : invalidEmails
      };
    } else {
      // No email provider configured
      throw new Error('No email provider configured. Please set RESEND_API_KEY in your environment variables.');
    }
  } catch (error) {
    console.error('Email sending error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to send email'
    };
  }
}
